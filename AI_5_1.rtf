{\rtf1\ansi\ansicpg1251\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
(setf state (list '(2 3 3) '(3 4 1) '(3 9 0)))\
\
(defun get-pos (a l &optional (pos 0))\
    (cond\
        ((null l) nil)\
        ((eql a (car l)) (print pos))\
        (t (get-pos a (cdr l) (+ 1 pos)))\
    )\
)\
 \
(defun get-coord (ls)\
    (do \
        (\
         (i 0 (+ i 1)) \
         (j ())\
         (pos ())\
        ) \
        ((numberp j) pos) \
        ((lambda(ls) (setf j (get-pos 0 (nth i ls))) (setf pos (list i j)) ) ls)\
    )\
)\
\
\
\
(setf position (get-coord state))\
(print position)\
\
(defun direction (pos) \
    (let ((drc ()))\
         (cond \
             ((equal '(0 0) pos)(setf drc '(up left)))\
             ((equal '(0 1) pos)(setf drc '(up right left)))\
             ((equal '(0 2) pos)(setf drc '(up right)))\
             ((equal '(1 0) pos)(setf drc '(up right down left)))\
             ((equal '(1 1) pos)(setf drc '(up right down)))\
             ((equal '(1 2) pos)(setf drc '(up down left)))\
             ((equal '(2 0) pos)(setf drc '(down left)))\
             ((equal '(2 1) pos)(setf drc '(right down left)))\
             ((equal '(2 2) pos)(setf drc '(right down)))\
         )\
         (progn drc)\
    )\
    \
)\
\
(setf direction (direction '(0 1)))\
(print direction)\
\
\
\
\
}